<h1 align="center" background="#808080">JavaScript Notes</h1>

Variable :

    =>  In JavaScript, a variable is a symbolic name or identifier that is used to store and represent data in a program. Variables are a fundamental concept in programming languages, allowing developers to manipulate and work with data dynamically.
    
    =>  To declare a variable in JavaScript, you can use the var, let, or const keyword, followed by the variable name. Here's a brief overview of each:


Variable Declaration keywords:

    =>  var: var was the primary keyword for declaring variables. It has function-scoping rather than block-scoping, and it is globally scoped if declared outside of any function.

    =>  let: let allows you to declare variables with block-scoping. This means the variable is only accessible within the block (enclosed by curly braces) where it is declared.

    =>  const: const is used to declare constants. Once a value is assigned to a const variable, it cannot be reassigned.

    =>  Variables can store various types of data, including numbers, strings, objects, arrays, and functions. The data type of a variable is dynamically determined based on the type of value assigned to it.


DataType :

    =>  JavaScript is a dynamically-typed language, which means that variables do not have fixed types, and their types can change during the execution of a program. JavaScript has several built-in data types, which can be broadly categorized into two main groups: primitive types and object types.

Primitive Data Types:

    =>  Number: Represents numeric values. It can be integers or floating-point numbers.

    =>  String: Represents sequences of characters enclosed in single or double quotes.

    =>  Boolean: Represents a logical value, either true or false.

    =>  Undefined: Represents a variable that has been declared but not assigned a value.

    =>  Null: Represents the intentional absence of any object value.

    =>  Symbol: Symbols are unique and immutable data types often used as identifiers for object properties.


TypeOf :

    =>  The typeof operator in JavaScript is used to determine the data type of a variable or an expression. It returns a string that represents the type of the operand.


Operator :

    =>  Arithmetic Operators:
        -  + (Addition): Adds two values.
        -  - (Subtraction): Subtracts the right operand from the left operand.
        -  * (Multiplication): Multiplies two values.
        -  / (Division): Divides the left operand by the right operand.
        -  % (Modulo): Returns the remainder after division.


    => Comparison Operators:
        -  == (Equality): Compares two values for equality, with type coercion.
        -  === (Strict Equality): Compares two values for equality without type coercion.
        -  != (Inequality): Compares two values for inequality, with type coercion.
        -  !== (Strict Inequality): Compares two values for inequality without type coercion.
        -  > (Greater Than): Checks if the left operand is greater than the right operand.
        -  < (Less Than): Checks if the left operand is less than the right operand.
        -  >= (Greater Than or Equal To): Checks if the left operand is greater than or equal to the right operand.
        -  <= (Less Than or Equal To): Checks if the left operand is less than or equal to the right operand.


    => Logical Operators:
        -  && (Logical AND): Returns true if both operands are true.
        -  || (Logical OR): Returns true if at least one operand is true.
        -  ! (Logical NOT): Returns the opposite boolean value of the operand.


    => Assignment Operators:
        -  = (Assignment): Assigns a value to a variable.
        -  += (Addition Assignment): Adds the right operand to the left operand and assigns the result to the left operand.
        -  -= (Subtraction Assignment): Subtracts the right operand from the left operand and assigns the result to the left operand.
        -  *= (Multiplication Assignment): Multiplies the left operand by the right operand and assigns the result to the left operand.
        -  /= (Division Assignment): Divides the left operand by the right operand and assigns the result to the left operand.
        -  %= (Modulo Assignment): Computes the modulo of the left operand divided by the right operand and assigns the result to the left operand.


    => Unary Operators:
        -  + (Unary Plus): Converts its operand to a number, or returns the original value if it is already a number.
        -  - (Unary Minus): Negates its operand.
        -  ++ (Increment): Increases the value of its operand by 1.
        -  -- (Decrement): Decreases the value of its operand by 1.


Identifiers :

    => Character Set:
        -  Identifiers can include uppercase and lowercase letters (A-Z, a-z).
        -  They can also include digits (0-9), but they cannot start with a digit.


    => Special Characters:
        -  The only special character allowed in an identifier is the underscore (_).


    => Reserved Words:
        -  JavaScript has reserved words that cannot be used as identifiers because they have predefined meanings in the language. Examples include if, else, while, function, etc.


    => Unicode Characters:
        -  JavaScript allows the use of Unicode characters beyond the ASCII character set in identifiers.


    => Case Sensitivity:
        -  JavaScript is case-sensitive. myVar and myvar are considered different identifiers.


    => Length:
        -  There is no specific limit on the length of an identifier, but it's a good practice to keep them reasonably short and meaningful.


    => Naming Conventions:
        -  Use descriptive names that convey the purpose or meaning of the variable or function.
        -  Use camelCase for multi-word identifiers (e.g., myVariable, calculateTotal).
        -  Constants are often written in all uppercase with underscores (e.g., MAX_SIZE, PI).


Word case :

    => Camel Case:
        -  Capitalizes the first letter of each word except for the initial word. The first word starts with a lowercase letter.
        - Ex. - myVariableName, calculateTotalAmount, getUserInfo

    => Pascal Case (or Upper Camel Case):
        -  Similar to Camel Case, but the first letter of each word is capitalized, including the initial word.
        - Ex. - MyClass, CalculateTotalAmount, GetUserInfo

    => Snake Case:
        -  Words are written in lowercase and separated by underscores.
        - Ex. - my_variable_name, calculate_total_amount, get_user_info


String :

    =>  String is a data type used to represent a sequence of characters. Characters can include letters, numbers, symbols, and whitespace. Strings are one of the fundamental data types in most programming languages, including JavaScript.
    =>  In JavaScript, you can create a string by enclosing a sequence of characters in single (') or double (") quotes. 


String Indeces :

    =>  strings are zero-indexed, meaning that the characters in a string are assigned numerical indices starting from 0. You can access individual characters in a string using these indices.


String methods :

    => length:
        -  Returns the length of a string, indicating the number of characters in the string.

    => charAt(index):
        -  Returns the character at the specified index in a string.

    => concat(str1, str2, ...):
        -  Concatenates two or more strings and returns a new string.

    => indexOf(substring, [startIndex]):
        -  Returns the index of the first occurrence of a substring within a string. If not found, returns -1.

    => lastIndexOf(substring, [startIndex]):
        -  Returns the index of the last occurrence of a substring within a string. If not found, returns -1.

    => substring(startIndex, [endIndex]):
        -  Extracts a portion of a string starting from the specified index up to, but not including, the endIndex.

    => slice(startIndex, [endIndex]):
        -  Extracts a portion of a string from startIndex to endIndex. Allows negative indices.

    => toUpperCase():
        -  Converts all characters in a string to uppercase.

    => toLowerCase():
        -  Converts all characters in a string to lowercase.

    => trim():
        -  Removes leading and trailing whitespaces from a string.

    => replace(searchValue, replaceValue):
        -  Replaces occurrences of a specified substring or regular expression with another string.

    => split(separator, [limit]):
        -  Splits a string into an array of substrings based on a specified separator. Optionally limits the number of splits.

    => startsWith(searchString, [position]):
        -  Checks if a string starts with the specified substring. Returns a boolean.

    => endsWith(searchString, [length]):
        -  Checks if a string ends with the specified substring. Returns a boolean.

    => includes(searchString, [position]):
        -  Checks if a string contains the specified substring. Returns a boolean.


Null & Undefined :

    => null:
        -  null is a special object value that represents the intentional absence of any object value.
        -  It is often used to explicitly indicate that a variable or object property has no assigned value or that an object should have no value.
        -  It is a type and a value.
        -  Use null to explicitly indicate the absence of a meaningful object value.

    => undefined:
        -  undefined is a primitive value that is automatically assigned to a variable that has been declared but has not been assigned any value.
        -  It is also the default return value for a function that does not explicitly return anything.
        -  It is a type and a value.
        -  Use undefined when a variable has been declared but has no assigned value.


Console :

    =>  The console object is a built-in object that provides methods for interacting with the browser's debugging console. It is commonly used for debugging and logging information during development. 
    =>  The console object is not part of the JavaScript language specification itself but is implemented by web browsers for debugging purposes.


Template Literals :

    => Template Literal:
        -  Enclosed by backticks (`), allowing for the easy embedding of expressions and multiline strings.
        -  Supports string interpolation, where expressions are inserted dynamically using ${}.
        -  Provides a cleaner and more readable way to work with strings compared to traditional string concatenation.


Condition Statement :

    => if Statement:
        -  The if statement is used to execute a block of code if a specified condition is true. It can be followed by an optional else block to specify code that should be executed when the condition is false.

    => Nested if-else:
        -  A programming construct where an if-else statement is placed inside another if or else block, allowing for multiple levels of conditional checks. The inner if-else statement is executed based on the result of the outer condition.

    => switch Statement:
        -  The switch statement is used to perform different actions based on different conditions. It provides a cleaner way to handle multiple conditions compared to long chains of if and else if.


Trutsy & Falsy :

    => Truthy:
        -  Values that are considered truthy when coerced to a boolean. These values are treated as true in boolean expressions.
        -  Examples of truthy values include non-empty strings, numbers other than 0, objects, arrays, functions, and the boolean value true.

    => Falsy:
        -  Values that are considered falsy when coerced to a boolean. These values are treated as false in boolean expressions.
        -  Examples of falsy values include an empty string (''), 0, NaN (Not a Number), null, undefined, and the boolean value false.


Atert, Prompt and Warning :

    => Alert:
        -  A method in JavaScript that displays a pop-up dialog box with a specified message. It is often used for simple informational messages to the user.

    => Prompt:
        -  A method in JavaScript that displays a pop-up dialog box with a message and an input field for the user to enter data. The entered data can then be captured and used in the program.

    => Warning:
        -  In a general sense, a warning is a message or indication that alerts the user about a potential issue or provides information that requires attention. In JavaScript, warnings can be conveyed using alert messages or other means to notify users about important aspects of the application.


Array :

    => Array:
        -  A data structure in programming that represents a collection of elements, each identified by an index or key. Elements can be of the same or different data types, and arrays provide methods for manipulation and traversal.


Array Methods :

    => length:
        -  Returns the number of elements in an array.

    => concat(arr1, arr2, ...):
        -  Combines two or more arrays, creating a new array.

    => push(element1, element2, ...):
        -  Adds one or more elements to the end of an array and returns the new length.

    => pop():
        -  Removes the last element from an array and returns that element.

    => unshift(element1, element2, ...):
        -  Adds one or more elements to the beginning of an array and returns the new length.

    => shift():
        -  Removes the first element from an array and returns that element.

    => indexOf(searchElement, [fromIndex]):
        -  Returns the first index at which a specified element is found in the array, or -1 if not found.

    => lastIndexOf(searchElement, [fromIndex]):
        -  Returns the last index at which a specified element is found in the array, or -1 if not found.

    => slice(startIndex, [endIndex]):
        -  Returns a shallow copy of a portion of an array from startIndex to endIndex (excluding endIndex).

    => splice(startIndex, deleteCount, [element1, element2, ...]):
        -  Changes the contents of an array by removing or replacing existing elements and/or adding new elements.

    => reverse():
        -  Reverses the order of elements in an array.

    => sort([compareFunction]):
        -  Sorts the elements of an array, optionally using a provided compare function.

    => forEach(callback):
        -  Executes a provided function once for each array element.

    => map(callback):
        -  Creates a new array by applying a provided function to each element of the original array.

    => filter(callback):
        -  Creates a new array with elements that satisfy a provided condition.

    => reduce(callback, [initialValue]):
        -  Applies a provided function against an accumulator and each element in the array to reduce it to a single value.

    => join([separator]):
        -  Joins all elements of an array into a string, separated by the specified separator.

    => isArray(value):
        -  Returns true if the provided value is an array; otherwise, returns false.


Array references :

    => Array References:
        -  In JavaScript, arrays are reference types. When you assign an array to a variable or pass it as a function parameter, you are working with a reference to the original array, not a new copy. Modifying the array through one reference affects all references to that array.


Constant array and immutable array : 

    => Constant Array Reference:
        -  An array declared using const in JavaScript means that the variable holding the array reference cannot be reassigned to a new array. However, the contents of the array can still be modified.

    => Immutable Array:
        -  An immutable array is one in which both the array reference and its contents cannot be changed once it is defined. Achieving true immutability may involve using techniques like Object.freeze() or libraries that provide immutable data structures.


Nested Array :

    => Nested Array:
        -  An array that is an element or a collection of elements within another array. This concept is often used to create multi-dimensional arrays.


Loops :

    => Loops:
        - loops are control structures that allow a set of instructions to be repeatedly executed until a certain condition is met. They provide a way to efficiently perform repetitive tasks by automating the iteration over a sequence of statements or code blocks.

    => Types of loop:

    => for Loop:
        - Executes a block of code a specified number of times. It is commonly used when the number of iterations is known in advance.

    => while Loop:
        - Repeatedly executes a block of code as long as a specified condition is true. It is often used when the number of iterations is not known in advance.

    => do...while Loop:
        - Similar to the while loop, but the block of code is executed at least once before the condition is checked. It ensures that the code inside the loop is executed at least once, regardless of the initial condition.

    => for...in Loop:
        - Iterates over the enumerable properties of an object. It is used for iterating over the keys (property names) of an object.

    => for...of Loop:
        - Introduced in ECMAScript 2015 (ES6), it iterates over the values of iterable objects, such as arrays, strings, maps, sets, etc.


Infinite loop :

    => Infinite Loop:
        - A loop in programming that runs indefinitely, continuously executing its block of code without termination. This situation is usually unintended and can lead to program instability.


Break keyword :

    => Break Keyword:
        - In programming, the "break" keyword is a control flow statement that is used to exit a loop or switch statement prematurely. It is commonly used to terminate the execution of a loop based on a certain condition.


Nested loop with nested array :


    => Nested Loop with Nested Array:
        - In programming, a nested loop with a nested array refers to the situation where one or more loops are placed inside another loop, and the looped structure involves arrays. This often occurs when dealing with multi-dimensional arrays, where an array contains other arrays as its elements, and nested loops are used to traverse or manipulate the elements of these arrays. The outer loop typically iterates over the outer array, and the inner loop iterates over the elements of the inner arrays.


Object Literals :

    => Object Literals:
        - In programming, an object literal is a syntactic construct for creating an object in a programming language, including JavaScript. It allows the creation of an object with properties and values in a concise and readable form. Object literals are defined by enclosing key-value pairs within curly braces {}, with each pair separated by commas.


Accessing Values from Object Literal :

    =>  Values in an object literal can be accessed using the dot notation (objectName.propertyName) or square bracket notation (objectName['propertyName']). The property name should be specified to retrieve the corresponding value from the object.


Adding and Updating Properties in Object Literal :

    =>  You can add and update properties in an object literal using the dot notation or square bracket notation. To add a new property, assign a value to a property that doesn't exist. To update an existing property, reassign a new value to the existing property.


Deleting Properties from Object Literal :

    =>  you can delete properties from an object literal using the delete keyword. Use delete objectName.propertyName or delete objectName['propertyName'] to remove a specific property from the object.


Object of Objects :

    =>  An "object of objects" refers to a situation where the properties of an object are themselves objects. Each property in the main object is another object, creating a nested or hierarchical structure. This allows for a more complex and organized representation of data.


Array of object :

    =>  An "array of objects" refers to an array where each element is an object. Each object in the array can have multiple properties, and the array as a whole is a collection of these objects.


Math object :

    =>  The Math object is a built-in object that provides mathematical constants and functions. It is not a constructor, so it cannot be instantiated with the new keyword. Instead, you can directly access its properties and methods.


Functions :

    =>  A function is a reusable block of code that performs a specific task or set of tasks. Functions allow you to organize code, make it more modular, and avoid repetition. Functions can take parameters (input) and return a result (output), but not all functions require both.


Function with Arguments:

    =>  A function in programming that accepts parameters or arguments allows you to pass values into the function when it is called. These arguments provide input to the function, allowing it to perform operations based on the provided values.


Return Keyword in function :

    =>  The return keyword is used within a function to specify the value that the function will output or return when it is called. The return statement not only terminates the function's execution but also sends a value back to the caller, allowing the result of the function to be used in other parts of the code.


Scope in function :

    => Function Scope:
        - Variables declared with var keyword are function-scoped, meaning they are only accessible within the function where they are defined.

    => Global Scope:
        - Variables declared globally are accessible throughout the entire program.

    => Block Scope:
        - Variables declared with let and const are block-scoped, meaning they are only accessible within the block (enclosed by curly braces) where they are defined.

    => Lexical Scope:
        - Lexical scope, also known as static scope, refers to the scope resolution based on the physical placement of code in the source code. In lexical scoping, a variable is accessible in the block where it is defined and all nested blocks, regardless of the runtime flow of the program.


Function expression :

    =>  function expression is a way to define a function as part of an expression, typically by assigning it to a variable. It allows functions to be used as values, assigned to variables, or passed as arguments to other functions. Unlike function declarations, function expressions are not hoisted to the top of the code and must be defined before they are used.


Higher order function :

    =>  A higher-order function is a function that takes one or more functions as arguments or returns a function as its result. This concept is often associated with functional programming and provides a powerful way to compose and manipulate functions.


Methods : 

    =>  methods are functions that are associated with an object or a class. They represent actions or behaviors that an object or class can perform. Methods are called on an object and can access and modify the object's properties.


    => Object Methods:
        - In the context of objects, methods are functions that are properties of an object. They are called using the syntax `object.method()`.

    => Class Methods:
        - In object-oriented programming, methods are functions defined within a class. They are called on instances of the class and can access instance-specific data.

    => Built-in Methods:
        - Many programming languages provide built-in methods as part of standard libraries or objects. For example, array methods in JavaScript like `map()`, `filter()`, and `reduce()`.

    => Instance Methods:
        - Methods that operate on an instance of an object.

    => Static Methods:
        - Methods that belong to a class rather than instances of the class. They are often called on the class itself rather than on instances.


This Keyword :
    
    =>  The this keyword in JavaScript refers to the object on which a method is being called. It is a reference to the current execution context and is used to access properties and methods of the object within which it is used.


Try and Catch :

    =>  The try...catch statement in JavaScript is used to handle exceptions or errors that occur within a block of code. The try block contains the code that may throw an exception, and the catch block contains the code to handle the exception if it occurs.


Arrow function :

    =>  Arrow functions are a concise way to write function expressions in JavaScript. They provide a more compact syntax compared to traditional function expressions and automatically capture the value of this from the surrounding code.


SetTimeout :

    =>  The setTimeout() method in JavaScript is used to execute a function or code block after a specified delay in milliseconds. It is commonly used to create a delay before running a specific task or to schedule a function to run in the future. 


SetInterval :

    =>  The setInterval() method in JavaScript is used to repeatedly execute a function or code block at a specified interval in milliseconds. It is commonly used to create a recurring task or to schedule a function to run at regular intervals.


Stop setInterval :

    =>  To stop a recurring task created with setInterval(), you can use the clearInterval() method. This method takes the ID returned by setInterval() and stops the recurring task associated with that ID.


This keyword with arrow function :

    =>  In arrow functions, the value of this is determined by the surrounding lexical context, which means that it is not affected by how or where the function is called. This behavior is different from traditional function expressions, where the value of this is determined by how the function is called.


Spread :

    =>  The spread operator (...) in JavaScript is used to expand an iterable (e.g., an array or string) into individual elements. It is commonly used to create a new array by combining the elements of an existing array with additional elements.


Spread with array literals :

    =>  When used with array literals, the spread operator can be used to create a new array by combining the elements of an existing array with additional elements. It provides a concise and readable way to work with arrays.


Spread with object literals :

    =>  When used with object literals, the spread operator can be used to create a new object by combining the properties of an existing object with additional properties. It provides a concise and readable way to work with objects.


Rest :

    =>  The rest parameter syntax (...) in JavaScript is used to represent an indefinite number of arguments as an array. It allows a function to accept any number of arguments, making it more flexible and versatile.


Destructuring :

    =>  Destructuring in JavaScript is a way to extract values from arrays or objects and assign them to variables in a more concise and readable manner. It provides a convenient way to work with complex data structures.


Default parameter :

    =>  Default parameters in JavaScript allow you to specify default values for function parameters. If a parameter is not provided when the function is called, the default value is used instead.


Destructuring with object :

    =>  Destructuring with objects allows you to extract properties from an object and assign them to variables using a concise syntax. It provides a convenient way to work with object properties.


local storage :

    => 